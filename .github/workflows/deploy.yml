name: üöÄ Deploy

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: write
  contents: read

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

jobs:
  lint:
    name: ‚¨£ ESLint
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: ./package.json
          node-version: 18

      - name: üì• Install deps
        run: npm install

      - name: üî¨ Lint
        run: npm run lint

  typecheck:
    name:  ¶ TypeScript
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: ./package.json
          node-version: 18

      - name: üì• Install deps
        run: npm install

      - name: üîé Type check
        run: npm run typecheck --if-present

  deploy:
    name: üöÄ Deploy
    runs-on: ubuntu-latest
    needs: [lint, typecheck]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4

      - name: ‚éî Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: üì• Install deps
        run: npm install

      - name: üì• Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Check Vercel Credentials
        run: |
          if [ -z "$VERCEL_TOKEN" ]; then
            echo "Error: VERCEL_TOKEN is not set"
            exit 1
          else
            echo "VERCEL_TOKEN is set"
          fi
          if [ -z "$VERCEL_ORG_ID" ]; then
            echo "Warning: VERCEL_ORG_ID is not set"
          else
            echo "VERCEL_ORG_ID is set"
          fi
          if [ -z "$VERCEL_PROJECT_ID" ]; then
            echo "Warning: VERCEL_PROJECT_ID is not set"
          else
            echo "VERCEL_PROJECT_ID is set"
          fi
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
